@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap');

* {
  box-sizing: border-box;
}

body {
  background-color: #f7f8fc;
  color: #141c2c;
  font-family: 'Open Sans', sans-serif;
  display: flex;
  /*align-items: center;*/
  justify-content: center;
  height: 100vh;
  margin: 0;
}

.backButton {
  position: absolute;
  top: 0;
  left: 0;
  background-color: #273349;
  border: none;
  border-radius: 5px;
  color: white;
  padding: 5px 10px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 36px;
  margin: 2px 2px;
  cursor: pointer;
  transition: transform 300ms;
}

.backButton:hover {
  color: green;
  transform: scale(1.1);
}

/*######################
#  2D & 3D Transforms  #
########################
 CSS transforms allow you to move, rotate, scale, and skew elements.

 2D-Transform Methods:
  translate() <- Moves Element from its current position (left,top)
  rotate()
  scaleX()
  scaleY()
  scale()
  skewX()
  skewY()
  skew()
  matrix() <- Combines all 2D-Transform Methods in one

 3D Transform Methods:
  rotateX()
  rotateY()
  rotateZ()

 Syntax:
  transform: matrix(1, -0.3, 0, 1, 0, 0); <- scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY()
*/

/*###############
#  Transitions  #
#################
 CSS transitions allows you to change property values smoothly, over a given duration.
 To create a transition effect, you must specify two things:
  -the CSS property you want to add an effect to
  -the duration of the effect

 Transition Properties:
  transition <- Combines property & duration.
  transition-delay
  transition-duration
  transition-property
  transition-timing-function <- args: ease(default), linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n)

 Syntax:
  div {
    width: 20px;
    height: 20px;
    transition: width 500ms, height 500ms;
  }
  div:hover {
    width: 40px;
    height: 60px;
  }
*/

/*##############
#  Animations  #
################
 An animation lets an element gradually change from one style to another.
 You can change as many CSS properties you want, as many times you want.
 To use CSS animation, you must first specify some keyframes for the animation.
 Keyframes hold what styles the element will have at certain times.

 Animation Properties:
  @keyframes  <-args: from{} & to{} or more Keyframes in Percent
  animation-name
  animation-duration
  animation-delay
  animation-iteration-count  <-args: number|infinite
  animation-direction  <-agrs: normal|reverse|alternate|alternate-reverse
  animation-timing-function  <-args: ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n)
  animation-fill-mode  <-args: none|forwards|backwards|both
  animation  <-Combines: name, duration, timing-function, delay, iteration-count, direction

 Syntax:
  div {
    width: 100px;
    height: 100px;
    background-color: red;
    position: relative;
    animation: example 5s linear 2s infinite alternate;
  }

  @keyframes example {
    0% {background-color:red; left:0px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
  }
*/

.container {
  /*display: flex;
  flex-direction: column;*/
  width: 960px;
  text-align: center;
}

h2 {
  margin-top: 0;
}

/* Transitions */
.transition {
  background-color: lightblue;
  border-radius: 5px;
  padding: 5px 5px;
  margin-top: 5px;
}

.transition .wrapper div {
  background-image: linear-gradient(to right,red,orange,green,blue,indigo);
  width: 200px;
  height: 100px;
  margin-top: 5px;
}

.transition p {
  display: inline-block;
  padding: 5px 5px;
  border-radius: 5px;
  box-shadow: 2px 2px 10px black;
  background-color: white;

  font-weight: bold;
  color: black;
}

.ease {
  transition: width 2s ease;
}

.linear {
  transition: width 2s linear;
}

.ease-in {
  transition: width 2s ease-in;
}

.ease-out {
  transition: width 2s ease-out;
}

.ease-in-out {
  transition: width 2s ease-in-out;
}

.cubic-bezier {
  transition: width 2s cubic-bezier(0.3, 1, 0.6, 2);
}

.transition .wrapper:hover div {
  width: 100%;
}


/* Animations */
.animation {
  background-color: lightblue;
  border-radius: 5px;
  margin: 5px 0 5px;
  padding: 5px 5px;
  width: 100%;
}

.box1 {
  width: 100%;
  height: 600px;
}

.radius {
  /*background-color: red;*/
  position: relative;
  top: 50px;
  left: 450px;
  width: 50px;
  height: 190px;
  animation: rotate 2s ease-in-out forwards infinite;
  transform-origin: bottom center;
}

.ball {
  border-radius: 50%;
  height: 50px;
  width: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.ball i {
  font-size: 36px;
  transform: rotate(90deg);
}


@keyframes rotate {
  0% {
    transform: rotate(-90deg);
  }

  50% {
    transform: rotate(90deg);
  }

  100% {
    transform: rotate(-90deg);
  }
}
